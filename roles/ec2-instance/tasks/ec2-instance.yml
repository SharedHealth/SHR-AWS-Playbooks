---

- name: Spin up {{instance.hostname}}
  ec2:
   region: "{{aws_region}}"
   aws_access_key:   "{{ aws_access_key }}"
   aws_secret_key:   "{{ aws_secret_key }}"
   image: "{{ instance.spec.AmiId }}"
   instance_type: "{{ instance.spec.InstanceType }}"
   tenancy: "{{ VpcInstanceTenancy }}"
   key_name: "{{ instance_key }}"
   source_dest_check: "{{ instance_source_destination_check }}"
   vpc_subnet_id: "{{ instance.spec.SubnetId }}"
   group_id: "{{ instance.spec.SecurityGroups }}"
   instance_tags: "{{ instance.spec.Tags|combine({'Name':instance.hostname}) }}"
   count_tag: "{{ {'Name':instance.hostname} }}"
   exact_count: "{{ instance.spec.ExactCount }}"
   volumes: "{{ instance.spec.InstanceVolumes[0].VolumeSpecifications }}"
   assign_public_ip: "{{ instance.spec.AssignPublicIp }}"
   wait: yes
  register: created_instance

- name: Create public dns record for {{ instance.hostname }}
  route53:
    aws_access_key:   "{{ aws_access_key }}"
    aws_secret_key:   "{{ aws_secret_key }}"
    command: create
    zone: "{{ PublicHostedZone }}"
    record: "{{ instance.hostname }}.{{ PublicHostedZone }}"
    type: A
    ttl: 300
    value: "{{ created_instance.tagged_instances.0.public_ip }}"
    overwrite: true
  when: created_instance.tagged_instances.0.public_ip

- name: Create private dns record for {{ instance.hostname }}
  route53:
    aws_access_key:   "{{ aws_access_key }}"
    aws_secret_key:   "{{ aws_secret_key }}"
    command: create
    zone: "{{ PrivateHostedZone }}"
    private_zone: yes
    record: "{{ instance.hostname }}.{{ PrivateHostedZone }}"
    type: A
    ttl: 300
    value: "{{ created_instance.tagged_instances.0.private_ip }}"
    overwrite: true

- ec2_remote_facts:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    region:           "{{ aws_region }}"
    filters:
      instance-state-name: running
      'tag:type': "public"
  register: public_proxy

- ec2_remote_facts:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    region:           "{{ aws_region }}"
    filters:
      instance-state-name: running
      'tag:type': "private"
  register: private_proxy

- name: Retrieve public hosted zone detail
  environment:
      AWS_ACCESS_KEY_ID: "{{ aws_access_key }}"
      AWS_SECRET_ACCESS_KEY: "{{ aws_secret_key }}"
  shell: "aws route53 list-hosted-zones-by-name --dns-name {{ PublicHostedZone }}"
  register: public_hosted_zone

- set_fact: public_hosted_zone_fact={{public_hosted_zone.stdout |from_json }}

- name: A record alias for public proxy
  route53:
    aws_access_key:   "{{ aws_access_key }}"
    aws_secret_key:   "{{ aws_secret_key }}"
    command: create
    zone: "{{ PublicHostedZone }}"
    record: "{{ created_instance.tagged_instances.0.tags.Name }}.{{ PublicHostedZone }}"
    type: A
    ttl: 300
    value: "{{ public_proxy.instances.0.tags.Name }}.{{ PublicHostedZone }}"
    alias: True
    alias_hosted_zone_id: "{{ public_hosted_zone_fact.HostedZones.0.Id |replace('/hostedzone/', '')}}"
    overwrite: true
  when:
    - created_instance.tagged_instances.0.tags.server_type is defined
    - created_instance.tagged_instances.0.tags.server_type == "public"

- name: A record alias for private proxy
  route53:
    aws_access_key:   "{{ aws_access_key }}"
    aws_secret_key:   "{{ aws_secret_key }}"
    command: create
    zone: "{{ PublicHostedZone }}"
    record: "{{ created_instance.tagged_instances.0.tags.Name }}.{{ PublicHostedZone }}"
    type: A
    ttl: 300
    value: "{{ private_proxy.instances.0.tags.Name }}.{{ PublicHostedZone }}"
    alias: True
    alias_hosted_zone_id: "{{ public_hosted_zone_fact.HostedZones.0.Id | replace('/hostedzone/', '')}}"
    overwrite: true
  when:
    - created_instance.tagged_instances.0.tags.server_type is defined
    - created_instance.tagged_instances.0.tags.server_type == "private"
